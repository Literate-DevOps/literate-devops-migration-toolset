#+TITLE: Generic Workflow for Migrating Files into org-mode Outline

* Summary

Many development tools provide code generation utilities for quickly creating the files and directories used by developers. This document will provide a generic workflow to migrate the existing files into an =org-mode= outline where the contents of the external files will be maintained using the Literate Programming paradigm.

* Migration Workflow

** Create a dedicated =org-mode= file

For this example, let's use [[file:common-project-files.org][common-project-files.org]] as the dedicated =org-mode= file.

** Create a list of files that will migrated into dedicated =org-mode= file

The list of files should be added as a named table or generated automatically as results from a named code block.

  - For example, the org syntax for a table named =file-list-table= which contains =.gitignore=, =LICENSE=, and =README.org=.
    
    #+NAME: create-file-list-table
    #+BEGIN_SRC org :exports code :results drawer replace 
      ,#+NAME: file-list-table
      | Files      |
      |------------|
      | README.org |
      | .gitignore |
      | LICENSE    |
   #+END_SRC

   #+BEGIN_QUOTE
     *Note:* Using the ~#+NAME:~ syntax will allow table data or the results from a =src= block to be used as input for an automated workflow if available.
   #+END_QUOTE

** Create dedicated =src= block for each file in the list of files under a =org-mode= heading as needed.

*** Manual Migration Workflow Example

**** Repeat the manual workflow below for each file

1. Create a dedicated parent heading (Optional)

   In some uses cases, grouping multiple project files under a dedicated heading will improve the readability and allow readers to quickly navigate to a specific group of files. 

   - If the dedicated parent heading is needed, then:

     - Validate the dedicated heading exists. 

       - Create the dedicated heading if the heading does not exist.

     - Navigate to the section directly under dedicated heading.

2. Create dedicated subheading for each filename (Optional) 

   In some uses cases, providing a dedicated subheading will improve the readability and allow readers to quickly navigate to a specific filename. 

   - If a dedicated subheading is provided, then:

     - Validate the dedicated subheading exists. 

       - Create the dedicated subheading if the subheading does not exist.

     - Navigate to the section directly under dedicated subheading.

3. Create a dedicated =src= block for the file.

   The dedicated =src= block should implement the following syntax:

   - Assigned human readible name.  

     For example, if the filename was =README.org= then using the filename as the assigned name would be appropriate.

     #+BEGIN_SRC org :exports code :eval never
       ,#+NAME: README.org
       # Start of SRC Code Block for README.org file ...
     #+END_SRC

     #+BEGIN_QUOTE
       *Note:* The syntax for ~#+NAME:~ does not allow whitespace characters. If the filename contains any whitespaces, e.g. =Updates List.txt=, then assign the block another name, e.g. =updates-list-txt=.
     #+END_QUOTE

   - Designate a language that is compatible with the contents of the file.

     For example:

     - If the file is a source code file, designate the lanuage of code block by file extension or type, i.e. =.rb= \rightarrow ruby, =.el= \rightarrow elisp, =.sh= \rightarrow shell, etc\dots  

     - If the file is a text file, designate =org= or =css= as the language of the code block.

   - Add the ~:tangle~ header with the path to the file, e.g. =README.org=, to the headers of the =src= block.

     #+BEGIN_SRC org :exports code :eval never 
       ,#+BEGIN_SRC org :tangle README.org 
       ,#+END_SRC
     #+END_SRC

4. Open the =src= block using ~C-c '~ which invokes ~org-edit-special~ function.

5. Insert the file contents into the =src= block using ~C-x i~ key chord which invokes the ~insert-file~ function.

6. Close the =src= block using ~C-c '~ which invokes ~org-edit-special~ function.

     #+BEGIN_SRC org :exports code :eval never 
       ,#+BEGIN_SRC org :tangle README.org 
         Contents of README.org file will go here ...
       ,#+END_SRC
     #+END_SRC

7. Confirm the original file, e.g. =README.org=, is backed up in version control. 

8. Tangle the =src= block contents into the original file using ~C-c~ ~C-v~ ~t~ which invokes the ~org-babel-tangle~ function.

9. Use version control to validate that the contents original are unchanged.

   If the contents of the original file are not the same, troubleshoot the migration steps. The most common reason is that a blank line was unintentionally added or deleted while inserting the file contents into the =src= block.   

   If the cause is not obvious, please read the [[file:file-migration-workarounds.org][File Migration Workarounds]] before submitting an issue.  

*** Automated Migration Workflow Example

For this example, we'll use a named =src= block written in =elisp=. In practice, I encourage you to use the language you prefer. To date, there are over 30 supported programming languages.

1. Evaluate the elisp code to define the ~ldomt/create-named-src-block~ and ~ldomt/migrate-file-list-into-src-blocks~ functions.

   #+NAME: ldomt-code
   #+BEGIN_SRC elisp
     (defun ldomt/create-named-src-block (name language parameters value)
       "Create org-mode SRC block using org-element API
        ;;(ldomt/create-named-src-block \"README.org\" \"org\" (format \":tangle \\\"%s\\\"\" \"README.org\")  \"* Heading 1\\n** Heading 2\\n**Heading 3\\n\" )
       "
       (org-element-interpret-data `(src-block (:language ,language :switches nil :parameters ,parameters  :begin nil :end nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ,value :post-blank 0 :post-affiliated 25 :name ,name :parent nil)))
       )


     (defun ldomt/migrate-file-list-into-src-blocks (files-list)
       "Process list of files into org-mode syntax
        ;; (ldomt/migrate-file-list-into-src-blocks files)
       "
       (let* ((results '())
              (name "")
              (language "")
              (parameters "")
              (value "")
              (src-block "")
              (heading-format "\n* =%s=\n")
              (heading "")
              )
         (dolist (filename files-list)
           (setq file-name (car filename))
           ;; Create safe name for src block
           (setq name (downcase (replace-regexp-in-string "[^[:word:].]" "-" file-name)))
           (setq language "org")
           (setq parameters (format ":tangle \"%s\"" file-name))
           (setq value (with-temp-buffer
                         (insert-file file-name)
                         (buffer-substring (point-min) (point-max))
                         ))
           (setq src-block (ldomt/create-named-src-block name language parameters value))
           (setq heading (format heading-format file-name))
           (setq results (append results `((,heading) (,src-block))))
           )
         (mapconcat 'car results "\n"))
       )
   #+END_SRC

   #+RESULTS: ldomt-code
   : ldomt/migrate-file-list-into-src-blocks

2. Add a file to the ~files-list-table~ table.

   #+BEGIN_SRC org :exports code 
     ,#+NAME: files-list-table
     | File Name   |
     |-------------|
     | My File.org |
   #+END_SRC

3. Create an anonymous =src= block that passes the table values as a parameter, i.e. ~:var files=files-list-table~, and set the ~:results~ header to =raw=.

   #+BEGIN_SRC org :exports code 
     ,#+BEGIN_SRC elisp  :var files=files-list-table :results raw  
       (ldomt/migrate-file-list-into-src-blocks files)
     ,#+END_SRC
   #+END_SRC

4. Evaluate the anonymous =src= block using ~C-c C-c~ and the external file will be inserted into the buffer below the anonymous block. Below are the example results:

   #+BEGIN_SRC org :exports code 
     ,#+RESULTS:

     ,* =My File.org=

     ,#+NAME: my-file.org
     ,#+BEGIN_SRC org :tangle "My File.org"
       ,,* Literate DevOps Migration Toolset
       Literate DevOps Migration Toolset provides utilities and documentation to facilitate migrating projects over to the Literate Programing paradigm compatible with =org-mode=. 
       - [[file:generic-file-migration-workflow.org][Generic Workflow for Migrating Files into org-mode Outline]]
       - [[file:file-migration-workarounds.org][File Migration Workarounds]]
     ,#+END_SRC

   #+END_SRC

7. Confirm the original file, e.g. =My File.org=, is backed up in version control. 

8. Tangle the contents of the new =src= block into the original file using ~C-c~ ~C-v~ ~t~.

9. Use version control to validate that the contents original are unchanged.

* Export Settings                                                  :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t

#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#
# Add Fix for org-ruby support
#

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport


